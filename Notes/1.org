#-*- mode: org -*-
#+STARTUP: showall
#+TODO: TOREAD READING DONE

* Chapter 1
** 1.1 Elements of Programming
   - Lisp description of processes, called /procedures/, can
     themselves be represented and stored as Lisp Data.
   - Every powerful language has 3 components:
     1. Primitive Expressions
     2. Means of Combination
     3. Means of Abstraction
*** 1.1.1 Expressions
    - (4)
    - (+ 4 5)
    - Pretty Printing
    - REPL :: Read-Eval-Print Loop
    - These are our primitive data and procedures
*** 1.1.2 Naming and the Environment
    - (define pi 3.14)
    - /define/ is our means of abstraction
    - Interpreter maintains a memory called /environment/
    - There may be more than one environments involved
*** 1.1.3 Evaluation Combinations
    - To eval:
      1. Eval the subexpressions
      2. Apply procedure that is value of leftmost subexpr to args
         that are values of other subexprs
    - /Tree accumulation/ or percolation
    - Eval rule above doesn't handle definitions. These exceptions
      to the general eval rules are called *special forms*. 
    - Therefore, /define/ is a special form
    - Lisp has a very simple syntax; that is, the evaluation rule for
      expressions can be described by a simple general rule together
      with specialized rules for a small number of special forms
*** 1.1.4 Compound Procedures
    - (define (<name> <formal params>) <body>)
    - <body> is an expression
    - It will be eval'd by replacing formal params by actual args
*** 1.1.5 Substitution Model for Procedure Application
    - To apply a compound procedure to arguments, evaluate the body of
      the procedure with each formal parameter replaced by the
      corresponding argument. 
    - This is only for our explanation. *not* how the interpreter
      works
    - Applicative Order vs Normal Order
      * Normal Order Evaluation :: "fully expand and reduce"
	- more complicated to deal with 
	- when we leave the realm of procedures that can be modeled
          by substitution. 
      * Applicative Order Evaluation :: "evaluate the arguments and
           then apply"
    - Both orders give same results for procedures that can be modeled
      by substitution. 
*** 1.1.6 Conditional Expressions and Predicates
    - /case analysis/ is a *special form*
(define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))
	
    - (cond (<p1> <e1>) (<p2> <e2>)... )
    - (<p> <e>) :: clause
    - <p> :: Predicate (#T/#F)
    - <e> :: expr
    - /if/ is a *special form*
    - (if <predicate> <consequent> <alternative>)
    - logical composition operations
      * and, or, not

