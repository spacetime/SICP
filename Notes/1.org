#-*- mode: org -*-
#+STARTUP: showall
#+TODO: TODO SOLVING DONE


* Chapter 1
** 1.1 Elements of Programming
   - Lisp description of processes, called /procedures/, can
     themselves be represented and stored as Lisp Data.
   - Every powerful language has 3 components:
     1. Primitive Expressions
     2. Means of Combination
     3. Means of Abstraction
*** 1.1.1 Expressions
    - 4 :: Represents a number
    - (+ 4 5)
    - Pretty Printing
    - REPL :: Read-Eval-Print Loop
    - These are our primitive data and procedures
*** 1.1.2 Naming and the Environment
    - (define pi 3.14)
    - /define/ is our means of abstraction
    - Interpreter maintains a memory called /environment/
    - There may be more than one environments involved
*** 1.1.3 Evaluation Combinations
    - To eval:
      1. Eval the subexpressions
      2. Apply procedure that is value of leftmost subexpr to args
         that are values of other subexprs
    - /Tree accumulation/ or percolation
    - Eval rule above doesn't handle definitions. These exceptions
      to the general eval rules are called *special forms*. 
    - Therefore, /define/ is a special form
    - Lisp has a very simple syntax; that is, the evaluation rule for
      expressions can be described by a simple general rule together
      with specialized rules for a small number of special forms
*** 1.1.4 Compound Procedures
    - (define (<name> <formal params>) <body>)
    - <body> is an expression
    - It will be eval'd by replacing formal params by actual args
*** 1.1.5 Substitution Model for Procedure Application
    - To apply a compound procedure to arguments, evaluate the body of
      the procedure with each formal parameter replaced by the
      corresponding argument. 
    - This is only for our explanation. *not* how the interpreter
      works
    - Applicative Order vs Normal Order
      * Normal Order Evaluation :: "fully expand and reduce"
	- more complicated to deal with 
	- when we leave the realm of procedures that can be modeled
          by substitution. 
	- Will not get caught if the arg expansion is never
          used. Expands *arguments* only when needed!
    (define (mult a b)
    ( * a b ))
    (mult (square 3) (square 3))
    ---> (* (square 3) (square 3))
      * Applicative Order Evaluation :: "evaluate the arguments and
           then apply"
        - Since it evaluates both args, even if they aren't required,
          it may get caught if the arg evaluation is erroneous
    - Both orders give same results for procedures that can be modeled
      by substitution.
*** 1.1.6 Conditional Expressions and Predicates
    - /case analysis/ is a *special form*
    (define (abs x)
      (cond ((> x 0) x)
            ((= x 0) 0)
            (else (- x))))
	
    - (cond (<p1> <e1>) (<p2> <e2>)... )
    - (<p> <e>) :: clause
    - <p> :: Predicate (#T or #F)
    - <e> :: expr
    - /if/ is a *special form*
    - (if <predicate> <consequent> <alternative>)
    - logical composition operations
      * and, or, not
*** DONE Exercise 1.1 - Exercise 1.5
*** 1.1.7 Example: Square Roots by Newtons's Method
    - Procedures must be effective
    - Math functions have declarative knowledge
    - Procedures have procedural knowledge
*** DONE Exercise 1.7 - Exercise 1.8
*** 1.1.8 Procedures as Block-Box Abstractions
    - For eg. 'square' is a /procedural abstraction/
    - It is a Black Box. Any procedure that squares will be equally good
    - Note that a procedure's efficiency depends on the machine
    - Local Names
      * The meaning of a procedure should be independent of the
        parameter names picked by the author
      * Formal parameter = *Bound Variable* and we say the procedure
        definition binds its formal parameters
      * If the variable isn't bound, we call it a *Free Variable*
      * The set of expressions for which a binding defines a name is
        called the *scope* of the name.
      * In procedure definition, bound vars have the body as the scope
      * For eg. In sqrt, < - abs and square were free!
      * If we called the param as 'abs' we would *capture* the free
        variable 'abs'.
    - Internal definitions and block structure
      * Auxiliary procedures can be nested in one procedure (defined
        before the procedures using them) -> *Block Structure*
    (define (sqrt x) 
    (define (sqrt-iter guess) ...)  ;notice no 'x' is passed
    (define ...)
    (sqrt-iter 1.0 x))
      * The enclosing procedure can bind a variable that can be free
        inside the enclosed procedures
      * This discipline is called Lexical Scoping
** 1.2 Procedures and the Processes They Generate
   - A procedure is a pattern for the local evolution of a process
   - Procedures gives local behaviour, combine to give global behavior
*** 1.2.1 Linear Recursion and Iteration
   - A linear recursive process grows linearly and has deferred
     operations
   - An iterative process has a fixed no. of /state variables/ + a
     fixed rule for updating them + (optional) end case
   - Do not confuse a Recursive Procedure (syntax) with a Recursive
     Process (evolution i.e. execution)
   - fact-iter is a recursive procedure which evolves as an Iterative
     Process due to Tail Recursion
   - Other languages need special syntax if they don't have Tail
     Recursion
   - Other iteration constructs in Scheme are Syntactic Sugar
*** DONE Exercise 1.9 - Exercise 1.10
*** 1.2.2 Tree Recursion
(define (fib n)
  (cond ((= n 0) 0)
    ((= n 1) 1)
    (else (+ (fib (- n 1))
             (fib (- n 2))))))
   - Evolves as a tree
   - Too many redundant computations
   - No. of leaves is Fib(n+1)
   - Grows as fast as Fib(n)
   - Fib(n) is closest to golden ration/sqrt(5)
   - Linear method grows as fast as n
**** Example: Counting Change



